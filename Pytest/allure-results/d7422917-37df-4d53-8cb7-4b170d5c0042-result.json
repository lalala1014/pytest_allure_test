{"name": "test_login[getXyhUser]", "status": "broken", "statusDetails": {"message": "TypeError: the JSON object must be str, bytes or bytearray, not NoneType", "trace": "self = <test_login.TestLogin object at 0x7f98604a7790>, api_name = 'getXyhUser'\ninit_login = <Pytest.api.app_api.AllApi object at 0x7f98604a76d0>\n\n    @allure.story(\"测试test_login\")\n    @pytest.mark.parametrize(\"api_name\", [\"getXyhUser\"])\n    def test_login(self, api_name, init_login):\n        print(\"2222222\")\n        r = init_login.send_request(api_name)\n        print(r)\n>       res = json.loads(init_login.send_request(api_name))\n\ntestcase/test_login.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = None, cls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not NoneType\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py:339: TypeError"}, "parameters": [{"name": "api_name", "value": "'getXyhUser'"}], "start": 1641984872678, "stop": 1641984872678, "uuid": "124d77da-0c38-44a6-ba72-ecbeafd77cdd", "historyId": "fd81c3b79ab52e82b7d1bfa2b1dc3af7", "testCaseId": "c54ba4c514553f220eeed2f7e798b554", "fullName": "testcase.test_login.TestLogin#test_login", "labels": [{"name": "story", "value": "测试test_login"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "wangzaideMacBook-Air.local"}, {"name": "thread", "value": "1095-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_login"}]}